generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Equipo {
  id           Int                @id @default(autoincrement())
  pcName       String             @unique
  numSerie     String             @unique
  unidad       String
  fecha        String
  autor        String
  aplicaciones EquipoAplicacion[]
}

model Aplicacion {
  id      Int                @id @default(autoincrement())
  nombre  String             @unique
  equipos EquipoAplicacion[]
}

model EquipoAplicacion {
  equipoId     Int
  aplicacionId Int
  instalada    Boolean    @default(false)
  aplicacion   Aplicacion @relation(fields: [aplicacionId], references: [id], onDelete: Cascade)
  equipo       Equipo     @relation(fields: [equipoId], references: [id], onDelete: Cascade)

  @@id([equipoId, aplicacionId])
}

model User {
  id            String          @id @default(uuid())
  password      String?
  username      String?         @unique
  createdAt     DateTime        @default(now())
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  name          String?
  updatedAt     DateTime        @updatedAt
  isActive      Boolean         @default(true)
  rol           Rol             @default(USER)
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Rol {
  USER
  ADMIN
}
